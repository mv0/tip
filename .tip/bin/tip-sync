#!/bin/sh
#
# Sync all branches to Linus latest
#

. $(dirname "$0")/tip-lib

check_master

# Linus branch is the reference
git-checkout linus
git-pull || exit 1;
git-checkout master
echo "Pulling from origin"
git-pull || exit 1;

BS=`get_topic_branches`

for B in $BS
do
    echo "Updating $B"
    git-checkout $B
    # check whether there's anything to pull from the origin:
    git-merge origin/$B || {
	echo "Merge of origin/$B failed. Please fix before syncing again"
	exit 1;
    }

    # Get the files which have been changed by that topic branch since
    # the last merge of linus tree
    TREF=`get_topic_reference $B`

    if [ -z "$TREF" ]
    then
	echo "No topic reference found. Using git-merge-base"
	MBASE=`git-merge-base linus HEAD`
	TD=`get_date_for_tag`
	TB=`echo $B | sed "s@/@-@"`
	git-tag "tip-"$TB"-"$TD $MBASE
	TREF="tip-"$TB"-"$TD
    fi

    # Check, whether upstream touched the same files since the last
    # update
    MERGE=`(git diff --name-only $TREF; git diff --name-only $TREF..linus) | sort | uniq -d`
    
    if [ -z "$MERGE" ];
    then
	echo "Skipped branch $B. linus latest does not conflict"
	continue;
    fi

    git-merge linus  || {

	echo Merging $B failed
	echo merge conflict - run tip-mergetool
	echo
	echo running subshell - type "exit" when resolved
	$SHELL || abort_merge

	NCOM=`git-ls-files -u`
	if [ ! -z "$NCOM" ]
	then
	    echo "Merge was not committed! Fixing it up"
	    git-add $(git-ls-files -u | cut -f2 | sort | uniq)
	    git-commit -s || abort_merge;
	fi
    }
    # Tag the merge
    TD=`get_date_for_tag`
    TB=`echo $B | sed "s@/@-@"`
    git-tag -f "tip-"$TB"-"$TD

done

# switch back to master again
git-checkout master
